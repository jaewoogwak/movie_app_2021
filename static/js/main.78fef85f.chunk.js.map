{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","className","src","alt","map","genre","index","slice","App","state","isLoading","movies","getMovies","a","axios","get","data","console","log","setState","this","movie","medium_cover_image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"2RA+BeA,MA1Bf,YAA8D,IAA7CC,EAA4C,EAA5CA,GAAIC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OAC/C,OACI,sBAAKC,UAAU,QAAf,UACI,qBAAKC,IAAKH,EAAQI,IAAKR,EAAIE,MAASA,IACpC,sBAAKI,UAAU,cAAf,UACI,oBAAIA,UAAU,eAAd,SAA8BJ,IAC9B,oBAAII,UAAU,cAAd,SAA6BL,IAC7B,oBAAIK,UAAY,gBAAhB,SAAiCD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACvC,oBAAiBL,UAAY,gBAA7B,SAA8CI,GAApCC,QAEf,oBAAGL,UAAU,iBAAb,UAA+BH,EAAQS,MAAM,EAAG,KAAhD,gBCmCDC,E,4MA5CbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAGVC,U,sBAAY,8BAAAC,EAAA,sEAKAC,IAAMC,IAAI,yEALV,gBAGEJ,EAHF,EAERK,KACEA,KAAQL,OAGZM,QAAQC,IAAIP,GACZ,EAAKQ,SAAS,CAAER,SAAQD,WAAW,IAPzB,2C,uDASZ,WACEU,KAAKR,c,oBAGP,WACE,MAA8BQ,KAAKX,MAA3BC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,OACnB,OACE,yBAASV,UAAU,YAAnB,SAAgCS,EAE5B,qBAAKT,UAAU,SAAf,SACE,sBAAMA,UAAU,cAAhB,0BAGFU,EAAOP,KAAI,SAAAiB,GAAK,OACd,cAAC,EAAD,CAEE1B,GAAI0B,EAAM1B,GACVC,KAAMyB,EAAMzB,KACZC,MAAOwB,EAAMxB,MACbC,QAASuB,EAAMvB,QACfC,OAAQsB,EAAMC,mBACdtB,OAAUqB,EAAMrB,QANXqB,EAAM1B,a,GA9BP4B,IAAMC,WCAxBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,a","file":"static/js/main.78fef85f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\nimport \"./App.css\";\r\n\r\nfunction Movie({ id, year, title, summary, poster, genres }) {\r\n    return (\r\n        <div className=\"movie\">\r\n            <img src={poster} alt={id} title = {title}></img>\r\n            <div className=\"movie__data\">\r\n                <h3 className=\"movie__title\">{title}</h3>\r\n                <h5 className=\"movie__year\">{year}</h5>\r\n                <ul className = \"movie__genres\">{genres.map((genre, index) => (\r\n                    (<li key ={index} className = \"genres__genre\">{genre}</li>)\r\n                ))}</ul>\r\n                <p className=\"movie__summary\">{summary.slice(0, 140)}...</p>\r\n                \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nMovie.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres : PropTypes.arrayOf(PropTypes.string).isRequired\r\n};\r\n\r\nexport default Movie;","import React from \"react\";\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./Movie.css\";\nimport \"./App.css\"\nclass App extends React.Component {\n  state = {\n    isLoading: true,\n    movies: []\n  };\n\n  getMovies = async () => {\n    const {\n      data: {\n        data: { movies }\n      }\n    } = await axios.get(\"https://yts-proxy.nomadcoders1.now.sh/list_movies.json?sort_by=rating\");\n    console.log(movies);\n    this.setState({ movies, isLoading: false })\n  }\n  componentDidMount() {\n    this.getMovies();\n  }\n\n  render() {\n    const { isLoading, movies } = this.state;\n    return (\n      <section className=\"container\">{isLoading ?\n        (\n          <div className=\"loader\">\n            <span className=\"loader_text\">Loading...</span>\n          </div>\n        ) : (\n          movies.map(movie => (\n            <Movie\n              key={movie.id}\n              id={movie.id}\n              year={movie.year}\n              title={movie.title}\n              summary={movie.summary}\n              poster={movie.medium_cover_image}\n              genres = {movie.genres}\n            />\n          ))\n        )\n      }</section>\n    )\n  }\n};\n\nexport default App;\n\n\n// component에 정보를 보낼 수 있다\n// component는 재사용 가능하다. \n\n// map은 array의 각 item에 function을 적용하고 array를 반환한다!\n// !!!\n\n// git push -u origin master\n\n// react는 자동으로 모든 className componenet의  render method를 실행하려고 함.\n\n// function -> className\n// className App 에서는 state를 사용할 수 있다.\n// state는 변하는 데이터. \n// state is object !\n// component의 data를 동적으로 바꿀 수 있다.\n\n// User call 'setState' then React refresh 'state' and call 'render function'\n// setState를 사용해야 state를 새로 가져오고 render function을 호출한다\n// 즉 setState를 사용하지 않으면 새로운 state와 render function이 호출되지 않음\n\n// state에 의존하지 않아야 한다.\n// 그래서 current를 사용!\n// 또한 current를\n\n//component life cycle","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('potato')\n);\n\n// react application이 하나의 component만을 rendering 해야한다.\n// component를 작성할 때 마다 import React from \"react\" 써주기\n// 써주지 않으면 react는 jsx가 있는 component를 사용하는 것을 이해하지 못함!\n// 컴포넌트는 HTML을 반환하는 함수다.\n// 이런 컴포넌트들을 app에 넣어주면 된다\n// new!!"],"sourceRoot":""}